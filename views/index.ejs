<%- include("partials/header.ejs") %>
<div class="max-w-2xl mx-auto mt-8 px-4">
  <form id="publishForm" action="/publish" method="post" class="space-y-4">
    <input
      type="text"
      class="w-full px-4 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
      name="Title"
      placeholder="Title heading"
      required
      autofocus
      value="<%= (locals.post && locals.logged && locals.editable) ? post.title : '' %>"
    >
    
    <!-- Rich Text Editor Container -->
    <div class="border border-gray-200 rounded-lg overflow-hidden">
      <!-- Toolbar -->
      <div class="flex flex-wrap gap-2 p-2 bg-gray-50 border-b border-gray-200">
        <div class="flex items-center gap-1 pr-2 border-r border-gray-200">
          <button type="button" class="p-2 rounded hover:bg-gray-200 transition-colors" data-command="formatBlock" data-value="H1">H1</button>
          <button type="button" class="p-2 rounded hover:bg-gray-200 transition-colors" data-command="formatBlock" data-value="H2">H2</button>
          <button type="button" class="p-2 rounded hover:bg-gray-200 transition-colors" data-command="formatBlock" data-value="H3">H3</button>
        </div>
        
        <div class="flex items-center gap-1 pr-2 border-r border-gray-200">
          <button type="button" class="p-2 rounded hover:bg-gray-200 transition-colors flex items-center justify-center" data-command="bold" title="Bold">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 4h8a4 4 0 014 4 4 4 0 01-4 4H6zM6 12h9a4 4 0 014 4 4 4 0 01-4 4H6z"/>
            </svg>
          </button>
          <button type="button" class="p-2 rounded hover:bg-gray-200 transition-colors flex items-center justify-center" data-command="italic" title="Italic">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <line x1="19" y1="4" x2="10" y2="4" stroke-width="2"/>
              <line x1="14" y1="20" x2="5" y2="20" stroke-width="2"/>
              <line x1="15" y1="4" x2="9" y2="20" stroke-width="2"/>
            </svg>
          </button>
          <button type="button" class="p-2 rounded hover:bg-gray-200 transition-colors flex items-center justify-center" data-command="underline" title="Underline">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 3v7a6 6 0 006 6 6 6 0 006-6V3M4 21h16"/>
            </svg>
          </button>
        </div>
        
        <div class="flex items-center gap-1 pr-2 border-r border-gray-200">
          <button type="button" class="p-2 rounded hover:bg-gray-200 transition-colors flex items-center justify-center" data-command="insertUnorderedList" title="Bullet List">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <line x1="8" y1="6" x2="21" y2="6" stroke-width="2"/>
              <line x1="8" y1="12" x2="21" y2="12" stroke-width="2"/>
              <line x1="8" y1="18" x2="21" y2="18" stroke-width="2"/>
              <line x1="3" y1="6" x2="3.01" y2="6" stroke-width="2"/>
              <line x1="3" y1="12" x2="3.01" y2="12" stroke-width="2"/>
              <line x1="3" y1="18" x2="3.01" y2="18" stroke-width="2"/>
            </svg>
          </button>
          <button type="button" class="p-2 rounded hover:bg-gray-200 transition-colors flex items-center justify-center" data-command="insertOrderedList" title="Numbered List">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <line x1="10" y1="6" x2="21" y2="6" stroke-width="2"/>
              <line x1="10" y1="12" x2="21" y2="12" stroke-width="2"/>
              <line x1="10" y1="18" x2="21" y2="18" stroke-width="2"/>
              <path d="M4 6h1v4" stroke-width="2"/>
              <path d="M4 10h2" stroke-width="2"/>
              <path d="M6 18H4c0-1 2-2 2-3s-1-1.5-2-1" stroke-width="2"/>
            </svg>
          </button>
        </div>

        <div class="flex items-center gap-1">
          <button type="button" class="p-2 rounded hover:bg-gray-200 transition-colors flex items-center justify-center" id="uploadButton" title="Upload Image">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
            </svg>
          </button>
        </div>
      </div>

      <!-- Editor -->
      <div id="editor" class="w-full min-h-[300px] p-4 focus:outline-none" contenteditable="true">
        <%= (locals.post && locals.logged && locals.editable) ? post.content : '' %>
      </div>
      
      <!-- Hidden textarea for form submission -->
      <textarea
        id="hiddenBody"
        class="sr-only"
        name="Body"
        required
        tabindex="-1"
      ><%= (locals.post && locals.logged && locals.editable) ? post.content : '' %></textarea>
    </div>

    <!-- Hidden field for storing processed image data -->
    <input type="hidden" id="imageData" name="imageData">
    
    <button class="w-full px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors" type="submit">
      <% if (locals.post) { %>Update<% } else {%>Publish<%}%>
    </button>
  </form>
</div>

<input type="file" id="fileInput" accept="image/*" class="hidden">

<script>
// Image Store
const ImageStore = {
  images: [],
  add(imageData) {
    const index = this.images.length;
    this.images.push(imageData);
    return index;
  },
  clear() {
    this.images = [];
  }
};

// Initialize elements
const editor = document.getElementById('editor');
const fileInput = document.getElementById('fileInput');
const uploadButton = document.getElementById('uploadButton');
const publishForm = document.getElementById('publishForm');
const hiddenBody = document.getElementById('hiddenBody');
const imageDataInput = document.getElementById('imageData');

// Initialize editor content
document.addEventListener('DOMContentLoaded', () => {
  if (hiddenBody.value) {
    editor.innerHTML = hiddenBody.value;
  }
  updateHiddenTextarea(); // Initial sync
});

// Format buttons handler
document.querySelectorAll('button[data-command]').forEach(button => {
  button.addEventListener('click', () => {
    const command = button.getAttribute('data-command');
    const value = button.getAttribute('data-value') || '';
    
    document.execCommand(command, false, value);
    editor.focus();
    updateButtonStates();
    updateHiddenTextarea();
  });
});

// Update button states based on current selection
function updateButtonStates() {
  document.querySelectorAll('button[data-command]').forEach(button => {
    const command = button.getAttribute('data-command');
    if (command === 'formatBlock') {
      const value = button.getAttribute('data-value');
      const active = document.queryCommandValue('formatBlock') === value.toLowerCase();
      button.classList.toggle('bg-gray-200', active);
    } else {
      const active = document.queryCommandState(command);
      button.classList.toggle('bg-gray-200', active);
    }
  });
}

// Update hidden textarea with editor content
function updateHiddenTextarea() {
  hiddenBody.value = editor.innerHTML;
}

// Process content before form submission
function processContent() {
  const tempDiv = document.createElement('div');
  tempDiv.innerHTML = editor.innerHTML;
  
  const images = tempDiv.getElementsByTagName('img');
  const imagesArray = Array.from(images);
  
  imagesArray.forEach(img => {
    const imageData = {
      src: img.src,
      alt: img.alt || '',
      width: img.width || '',
      height: img.height || ''
    };
    
    const imageIndex = ImageStore.add(imageData);
    const placeholder = document.createElement('span');
    placeholder.textContent = `<IMG:${imageIndex}>`;
    img.parentNode.replaceChild(placeholder, img);
  });
  
  return {
    content: tempDiv.innerHTML,
    images: ImageStore.images
  };
}

// Handle form submission
publishForm.addEventListener('submit', (e) => {
  e.preventDefault();
  
  if (!editor.textContent.trim() && !editor.querySelector('img')) {
    alert('Content is required');
    editor.focus();
    return;
  }

  const processedData = processContent();
  hiddenBody.value = processedData.content;
  imageDataInput.value = JSON.stringify(processedData.images);
  
  publishForm.submit();
});

// File upload handling
uploadButton.addEventListener('click', () => {
  fileInput.click();
});

fileInput.addEventListener('change', (e) => {
  const file = e.target.files[0];
  if (file && file.type.startsWith('image/')) {
    const reader = new FileReader();
    reader.onload = (e) => {
      document.execCommand('insertImage', false, e.target.result);
      updateHiddenTextarea();
      console.log("nig")
    };
    reader.readAsDataURL(file);
  }
  fileInput.value = '';
});

// Editor event listeners
editor.addEventListener('input', updateHiddenTextarea);
editor.addEventListener('mouseup', updateButtonStates);
editor.addEventListener('keyup', updateButtonStates);
editor.addEventListener('paste', (e) => {
  // Small delay to ensure content is pasted before updating
  setTimeout(updateHiddenTextarea, 0);
});


// Image handling utilities
const ImageUploader = {
  MAX_FILE_SIZE: 5 * 1024 * 1024, // 5MB

  async uploadImage(file) {
    if (!file.type.startsWith('image/')) {
      throw new Error('Invalid file type');
    }

    if (file.size > this.MAX_FILE_SIZE) {
      throw new Error('File size too large');
    }

    // Create FormData
    const formData = new FormData();
    formData.append('image', file);

    try {
      const response = await fetch('/upload', {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        throw new Error('Upload failed');
      }

      const data = await response.json();
      return data.url;
    } catch (error) {
      console.error('Upload error:', error);
      throw new Error('Failed to upload image');
    }
  }
};

// Modified file input handler
fileInput.addEventListener('change', async (e) => {
  const file = e.target.files[0];
  if (!file) return;

  try {
    uploadButton.disabled = true;
    uploadButton.innerHTML = 'Uploading...';

    const imageUrl = await ImageUploader.uploadImage(file);
    
    // Insert image into editor
    const img = document.createElement('img');
    img.src = imageUrl;
    img.style.maxWidth = '100%';
    
    // Use range if available, otherwise append to end
    const selection = window.getSelection();
    const range = selection.getRangeAt(0);
    range.insertNode(img);
    
    // Move cursor after image
    range.setStartAfter(img);
    range.setEndAfter(img);
    selection.removeAllRanges();
    selection.addRange(range);

    updateHiddenTextarea();
  } catch (error) {
    alert(`Error uploading image: ${error.message}`);
  } finally {
    uploadButton.disabled = false;
    uploadButton.innerHTML = `
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
      </svg>
    `;
    fileInput.value = '';
  }
});

// Modified process content function
function processContent() {
  const tempDiv = document.createElement('div');
  tempDiv.innerHTML = editor.innerHTML;
  
  const images = tempDiv.getElementsByTagName('img');
  const imagesArray = Array.from(images);
  
  imagesArray.forEach(img => {
    // Only store images that have been properly uploaded
    if (img.src.startsWith('data:') || img.src.startsWith(window.location.origin)) {
      const imageData = {
        src: img.src,
        alt: img.alt || '',
        width: img.width || '',
        height: img.height || ''
      };
      
      const imageIndex = ImageStore.add(imageData);
      const placeholder = document.createElement('span');
      placeholder.textContent = `<IMG:${imageIndex}>`;
      img.parentNode.replaceChild(placeholder, img);
    }
  });
  
  return {
    content: tempDiv.innerHTML,
    images: ImageStore.images
  };
}
</script>
<%- include("partials/footer.ejs") %>